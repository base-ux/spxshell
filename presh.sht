#!/bin/sh

# Unset all aliases
'unalias' -a

# Ensure 'command' is not a user function
unset -f command

# Use shell dependent 'local' definition
local="$(command -v local)"
test -n "${local}" || local="$(command -v typeset)"
alias local="${local}"

# Program name
PROG="$(basename -- "$0")"

####

# Print usage information
usage ()
{
    ! printf "Usage: %s [options] infile\n" "${PROG}"
}

# Print help information
usage_help ()
{
    usage
    cat << EOF

    -D var	define 'var'
    -U var	undefine 'var'
    -I dir	add 'dir' to the search list
    -o outfile	output file name

    infile	input file name
EOF
    exit 0
}

####

# Parse command line options
get_options ()
{
    local opt=""

    case "$1" in ( '-?' | '-help' | '--help' ) usage_help ;; esac
    while getopts ":D:I:U:o:" opt ; do
	case "${opt}" in
	    ( 'D' ) add_var "${OPTARG}" ;;
	    ( 'I' ) add_inclist "${OPTARG}" ;;
	    ( 'U' ) del_var "${OPTARG}" ;;
	    ( 'o' ) OUTFILE="${OPTARG}" ;;
	    ( ':' ) err "missing argument for option -- '${OPTARG}'" || usage ;;
	    ( '?' ) err "unknown option -- '${OPTARG}'" || usage ;;
	    (  *  ) err "no handler for option '${opt}'" ;;
	esac || return 1
    done
    shift $(( OPTIND - 1 ))
    test $# -le 1 && INFILE="${1:-}" || err "too many arguments" || usage
}

####

# Print error message
err ()
{
    ! printf "%s: error: %s\n" "${PROG}" "$*" >&2
}

# Execute command
cmd ()
{
    command ${1+"$@"} 2>/dev/null
}

####

# Check file
check_file ()
{
    local f="$1"

    test -n "${f}" || return 1
    test -f "${f}" || err "file '${f}' not found"  || return 1
    test -r "${f}" || err "can't open file '${f}'" || return 1
}

# Quote single quotes
squote ()
{
    local e="$1"
    local h=""
    local n=""

    while : ; do
	# Check for quotes
	case "${e}" in
	    ( *\'* )
		# There are quotes in the element
		h="${e%%\'*}"		# Get 'head' till quote
		e="${e#*\'}"		# Cut 'head' with quote
		n="${n}${h}'\''"	# Add 'head' to 'new' with quoted quote
		;;
	    ( * )
		# No more quotes found
		e="'${n}${e}'"		# Construct final string
		break			# and exit the cycle
		;;
	esac
    done
    printf "%s" "${e}"
}

####

# 'readlink' replacement
_readlink ()
{
    local p="$1"
    local l=""

    # Get link path from 'ls' output
    l="$(cmd ls -l "${p}")" || return 1
    printf "%s" "${l##*" -> "}"
}

# 'realpath' replacement
_realpath ()
{
    local p="$1"
    local b=""
    local d=""
    local l=""
    local readlink=""

    # If path does not exist then return error
    test -n "${p}" && test -e "${p}" || return 1
    if test -d "${p}" ; then
	# If path is directory just go there and get 'pwd'
	p="$(cd -P -- "${p}" ; pwd)"
    else
	# Determine 'readlink'
	readlink="$(command -v readlink)"
	test -n "${readlink}" || readlink="_readlink"
	# Split path to 'basename' and 'dirname'
	case "${p}" in
	    ( */* ) b="${p##*/}" ; d="${p%/*}" ;;
	    (  *  ) b="${p}" ; d="${PWD}" ;;
	esac
	while test -L "${d}/${b}" ; do
	    l="$("${readlink}" "${d}/${b}")" || return 1
	    case "${l}" in
		( */* )
		    b="${l##*/}"	# Get next 'basename'
		    case "${l}" in
			( /* ) d="${l%/*}" ;;		# 'Absolute' path
			(  * ) d="${d}/${l%/*}" ;;	# 'Relative' path
		    esac
		    ;;
		(  *  ) b="${l}" ;;	# Link points to file in the same directory
	    esac
	done
	d="$(cd -P -- "${d:-/}" ; pwd)"
	p="${d%/}/${b}"	# Final physical path
    fi
    printf "%s" "${p}"
}

# Canonicalize path name
canon_path ()
{
    local p="$1"
    local realpath="$(command -v realpath)"

    test -n "${realpath}" || realpath="_realpath"
    p="$("${realpath}" "${p}")" || return 1
    printf "%s" "${p}"
}

####

# Add directory to include list
add_inclist ()
{
    INCLIST="${INCLIST:+"${INCLIST} "}$(squote "$1")"
}

# Check variable name (in subshell)
check_vname ()
(
    LC_ALL=C		# Check variable name in POSIX locale
    case "$1" in
	( '' | '_' | [![:alpha:]_]* | [[:alpha:]_]*[![:alnum:]_]* )
	    err "illegal variable name: '$1'" ;;
    esac
)

# Add variable
add_var ()
{
    local var="$1"
    local val="1"	# Default value

    case "${var}" in ( *'='* ) val="${var#*=}" ; var="${var%%=*}" ;; esac
    check_vname "${var}" && eval "$(def_var "${var}" "${val}")" || return 1
}

# Delete variable
del_var ()
{
    check_vname "$1" && eval "$(undef_var "$1")" || return 1
}

# Print command to define variable
def_var ()
{
    printf "V_%s=%s" "$1" "$(squote "$2")"
}

# Print command to undefine variable
undef_var ()
{
    printf "unset -v V_%s" "$1"
}

# Check if variable is defined
is_defined ()
{
    eval "test \"X\" = \"\${V_${1}+X}\""
}

####

#
# The process of parsing of the expressions:
# - eval_expr() function calls parse() function
# - parse() function builds parse tree:
#   - get next token calling gettoken()
#   - check combination of tokens for errors
#   - add token to appropriate location in the parse tree
# - if there are no errors from parse() eval_expr() calls evaluate()
# - evaluate() recursively go through the parse tree and get the final result
#
# As POSIX shell does not support arrays and data structures
# parse tree is presented as a set of variables TX<i>
# where X is 'field' of 'data structure' (T - type, V - value,
# L - pointer to the left leaf, R - pointer to the right leaf)
# and <i> is decimal index of 'array'.
#
# The syntax of the expressions in EBNF as follows:
#
# expr		= { ws }, expr1, { ws } ;
# expr1		= term | nested-expr | bang-expr | def-expr | op-expr ;
# nested-expr	= '(', expr, ')' ;
# bang-expr	= '!', { ws }, expr1 - op-expr ;
# op-expr	= expr, op, expr ;
# def-expr	= "defined", ws, { ws }, varname
#		| "defined", { ws }, '(', { ws }, varname, { ws }, ')' ;
# term		= integer | string | varname ;
# integer	= [ sign ], digit, { digit } ;
# string	= quote, { chars }, quote ;
# chars		= bs-quote | char, { char } ;
# varname	= ( '_', vchar | letter ), { vchar } ;
# vchar		= letter | digit ;
# char		= print - quote ;
# op		= '==' | '!=' | '<=' | '>=' | '<' | '>' | '&&' | '||' ;
# ws		= ' ' | '\t' ;
# sign		= '+' | '-' ;
# bs-quote	= '\"' ;
# quote		= '"' ;
# letter	= ? [:alpha:] ? ;
# print		= ? [:print:] ? ;
# digit		= ? [:digit:] ? ;
#
# Types of tokens classified by gettoken() function:
#
# - Terminals:
#   'N': decimal number with of without sign
#   'S': literal string
#   'V': variable name
# - Operators:
#   'A': logical AND
#   'B': logical NOT
#   'C': comparison
#   'D': check if variable is defined
#   'O': logical OR
# - Grouping:
#   'l': left parentheses
#   'r': right parentheses
# - Errors:
#   'EU': unterminated string
#   'EG': general error
#

# Get and classify next token from expression
gettoken ()
{
    local s="$1"
    local r=""

    # Trim leading spaces
    case "${s}" in ( [[:space:]]* ) s="${s#"${s%%[![:space:]]*}"}" ;; esac
    case "${s}" in
	( '' ) ;;
	( '=='* | '!='* | '<='* | '>='* ) r="C:${s%%"${s#??}"}" ;;
	( '<'* | '>'* )			  r="C:${s%%"${s#?}"}"  ;;
	( '('*  ) r="l:${s%%"${s#?}"}"  ;;
	( ')'*  ) r="r:${s%%"${s#?}"}"  ;;
	( '!'*  ) r="B:${s%%"${s#?}"}"  ;;
	( '&&'* ) r="A:${s%%"${s#??}"}" ;;
	( '||'* ) r="O:${s%%"${s#??}"}" ;;
	( [+-][[:digit:]]* | [[:digit:]]* )
	    r="${s%%"${s#[+-]}"}" ; s="${s#"${r}"}" ; r="N:${r}${s%%[![:digit:]]*}" ;;
	( 'defined' | 'defined'[![:alnum:]_]* ) r="D:defined" ;;
	( [[:alnum:]_]* ) r="V:${s%%[![:alnum:]_]*}" ;;
	( '"'* )
	    s="${s#\"}"			# Remove first quote
	    # Check for quoted 'quote' (\")
	    while
		case "${s%%\"*}" in	# Check symbols before next 'quote'
		    ( *\\\\ ) false ;;	# Skip two backslash symbols (\\)
		    ( *\\ )   true  ;;	# Backslash immediately before 'quote'
		    ( * )     false ;;	# No backslash symbols
		esac
	    do
		# Add to 'r' all characters until '\"' and remove them from 's'
		r="${r}${s%%\\\"*}\\\"" ; s="${s#*\\\"}"
	    done
	    case "${s}" in
		( *\"* ) r="S:${r}${s%%\"*}" ;;	# Add characters up to closing 'quote'
		( * )    r="EU:\"${r}${s}"   ;;	# Unterminated string
	    esac ;;
	( * ) r="EG:${s}" ;;	# General parsing error
    esac
    TOKEN="${r}"	# Pass 'token' to the upper function
}

# Parse expression and build parse tree
parse ()
{
    # 'expr' contains the remainder of expression
    local expr="$1"
    # Pointers to tree nodes: (c)urrent, (r)oot, (l)ast
    local c=0   ; local r=0   ; local l=0
    # Type of tokens: (c)urrent, (p)revious, (r)oot, (l)ast
    local ct="" ; local pt="" ; local rt="" ; local lt=""
    # Values of tokens: (c)urrent, (p)revious
    local cv="" ; local pv=""
    # Stack of '<rt>:<r>;<lt>:<l>' pairs
    local s=""

    while test -n "${expr}" && gettoken "${expr}" ; do
	c=$(( c + 1 ))				# Next 'index' in the 'array'
	# Save previous token info and get current
	pv="${cv}" ; cv="${TOKEN#*:}"
	pt="${ct}" ; ct="${TOKEN%%":${cv}"}"
	# Check for general errors and cut current token from 'expr'
	case "${ct}" in
	    ( 'EG' ) err "parse error at '${cv}'" ;;
	    ( 'EU' ) err "unterminated string: '${cv}'" ;;
	    ( S  ) expr="${expr#*"\"${cv}\""}" ;;
	    ( *  ) expr="${expr#*"${cv}"}" ;;
	esac || return 1

	# Check for errors
	case "${pt}${ct}" in
	    ( [NSVr][NSVBDl] ) err "missing operator before token '${cv}'" ;;
	    ( [ACO] | l[ACO] ) err "no left operand for '${cv}'" ;;
	    ( [ABCDO][ACOr] ) err "no right operand for '${pv}'" ;;
	    ( D[!Vl] ) err "'${pv}' requires variable" ;;
	    ( lr ) err "missing expression in '()'" ;;
	    ( *r ) test ${#s} -ne 0 || err "missing '('" ;;
	    ( *V ) check_vname "${cv}" ;;
	esac || return 1

	# Check for nesting
	# For nesting we build 'sub-tree' and link it to the 'upper' tree
	case "${ct}" in
	    ( 'l' )
		# Save current root/last info in the stack and reset both
		s="${s}|${rt}:${r};${lt}:${l}" ; r=0 ; l=0 ; rt="" ; lt=""
		continue ;;
	    ( 'r' )
		# Restore 'last' info from the stack
		lt="${s##*;}" ; l="${lt#*:}" ; lt="${lt%:*}"
		# If 'last' is 'empty' (as saved 'root' obviously)
		# then nested 'root' acctually will be current 'root'
		test ${l} -ne 0 &&
		{
		    case "${lt}${rt}" in
			( D[!V] ) err "'defined' requires variable" || return 1 ;;
		    esac
		    eval "TR${l}=${r}"	# Link nested 'root' to the right of restored 'last'
		    # Restore 'root' info from the stack and reset 'last'
		    rt="${s##*|}" ; rt="${rt%;*}"
		    r="${rt#*:}" ; rt="${rt%:*}" ; l=0 ; lt=""
		}
		s="${s%|*}"	# Drop the last entry from the stack
		continue ;;
	esac

	# Create 'tree' node
	eval "TV${c}=\"\${cv}\" ; TT${c}=\"\${ct}\" ; TL${c}=0 ; TR${c}=0"

	# Link 'current' node to the 'tree':
	# - 'terminal' and 'unary' - to the right of 'last'
	# - 'higher' priority operation - insert to the right of 'root'
	# - 'lower' or 'equal' priority - become new 'root'
	case "${rt}${ct}" in
	    ( ?[NSVBD]      ) eval "TR${l}=${c}" ;;
	    ( OA    | [AO]C ) eval "TL${c}=\${TR${r}} ; TR${r}=${c}" ;;
	    ( [!O]A | ?[CO] ) eval "TL${c}=${r}" ; r=${c} ; rt="${ct}" ;;
	esac
	test ${r} -eq 0 && { r=${c} ; rt="${ct}" ; }	# If first 'root' node
	l=${c} ; lt="${ct}"	# 'current' becomes 'last'
    done
    # Final check for errors
    case "${ct}" in
	( [ABCDO] ) err "no right operand for '${cv}'" ;;
	( * ) test ${#s} -eq 0 || err "missing ')'" ;;
    esac || return 1
    R=${r}	# Pass 'root' node number to the upper function
}

# Check if argument is decimal number
is_num ()
{
    case "${1#[+-]}" in
	( '' | [![:digit:]]* | [[:digit:]]*[![:digit:]]* ) return 1 ;;
    esac
}

# Evaluate expression by following parse tree
evaluate ()
{
    local n="$1"
    local t="" ; local v="" ; local l=0 ; local r=0
    local res1="" ; local res2="" ; local ret=""
    local op=""

    # Get 'tree' node info
    eval "t=\"\${TT${n}}\" ; v=\"\${TV${n}}\" ; l=\${TL${n}} ; r=\${TR${n}}"

    case "${t}" in
	( [NS] ) ret="${v}" ;;			# Number and string are 'terminals'
	( V ) eval "ret=\"\${V_${v}}\"" ;;	# Variable is also 'terminal'
	( B )
	    # '!' unary
	    evaluate ${r} ; res2="${XRET}" ; test -n "${res2}" || res2=0
	    is_num "${res2}" && test ${res2} -eq 0 && ret=1 || ret=0
	    ;;
	( D )
	    # 'defined' unary
	    eval "res2=\"\${TV${r}}\""
	    is_defined "${res2}" && ret=1 || ret=0
	    ;;
	( [AO] )
	    # '&&' and '||' logical operators evaluate the second operand
	    # only if the first operand is not enough for result
	    case "${t}" in ( A ) op="-ne" ;; ( O ) op="-eq" ;; esac
	    evaluate ${l} ; res1="${XRET}" ; test -n "${res1}" || res1=0
	    is_num "${res1}" && test ${res1} -eq 0 && ret=0 || ret=1
	    if eval "test ${ret} ${op} 0" ; then
		evaluate ${r} ; res2="${XRET}" ; test -n "${res2}" || res2=0
		is_num "${res2}" && test ${res2} -eq 0 && ret=0 || ret=1
	    fi
	    ;;
	( C )
	    # 'Compare' operators evaluate both operands
	    evaluate ${l} ; res1="${XRET}"
	    evaluate ${r} ; res2="${XRET}"
	    is_num "${res1}" && is_num "${res2}" &&
	    {
		case "${v}" in
		    ( '==' ) op="-eq" ;;
		    ( '!=' ) op="-ne" ;;
		    ( '>'  ) op="-gt" ;;
		    ( '<'  ) op="-lt" ;;
		    ( '>=' ) op="-ge" ;;
		    ( '<=' ) op="-le" ;;
		esac
		eval "test ${res1} ${op} ${res2}" && ret=1 || ret=0
	    } ||
	    {
		case "${v}" in
		    ( '==' ) test "${res1}" = "${res2}"  ;;
		    ( '!=' ) test "${res1}" != "${res2}" ;;
		    ( '>'  ) test "${res1}" \> "${res2}" ;;
		    ( '<'  ) test "${res1}" \< "${res2}" ;;
		    ( '>=' ) test "${res1}" = "${res2}" || test "${res1}" \> "${res2}" ;;
		    ( '<=' ) test "${res1}" = "${res2}" || test "${res1}" \< "${res2}" ;;
		esac && ret=1 || ret=0
	    }
	    ;;
    esac
    XRET="${ret}"	# Pass 'result' to the upper function
}

# Expression evaluation
eval_expr ()
{
    R=0		# Set 'global' variable for 'root' of the 'tree'
    parse "$*" || return 1
    test ${R} -ne 0 && evaluate ${R} || XRET=0
}

####

# Search include file
search_inc ()
{
    local f="$1"
    local d=""
    local n=""

    case "${f}" in
	( /* ) test -e "${f}" && n="${f}" ;;	# Absolute path
	(  * )
	    # Relative to CURFILE
	    case "${CURFILE}" in
		( */* ) d="${CURFILE%/*}" ;;
		(  *  ) d="${PWD}" ;;
	    esac
	    # Prepend search list with CURFILE path
	    eval "set -- $(squote "${d}") ${INCLIST}"
	    for d in "$@" ; do
		test -e "${d}/${f}" && { n="${d}/${f}" ; break ; }
	    done
	    ;;
    esac
    test -n "${n}" || err "can't find include file '${f}'" || return 1
    printf "%s" "${n}"
}

####

# Evaluate value and add to return string
eval_ret ()
{
    case "$1" in
	( '' ) ;;
	( *  )
	    eval "$1"
	    RET="${RET:+"${RET} ; "}$1"
	    ;;
    esac
}

# Process 'define' directive
do_define ()
{
    local args="$1"
    local var="${args%%[[:space:]]*}"		# Get variable name
    local val="${args#"${var}"}"		# Get variable value

    test -n "${var}" || err "no parameters set for 'define' directive" || return 1
    check_vname "${var}" || return 1
    # Trim leading spaces
    case "${val}" in ( [[:space:]]* ) val="${val#"${val%%[![:space:]]*}"}" ;; esac
    test -n "${val}" || val="1"		# Default value
    case "${val}" in ( \"*\" ) val="${val#\"}" ; val="${val%\"}" ;; esac	# Remove quotes
    eval_ret "$(def_var "${var}" "${val}")"
}

# Process 'include' directive
do_include ()
{
    local f="$1"
    local ret=""

    case "${f}" in
	( \"*\" ) f="${f#\"}" ; f="${f%\"}" ;;				# Remove quotes
	( * ) expand "${LM}${f}${RM}" && f="${VEXP}" || return 1 ;;	# Try to expand variable
    esac
    test -n "${f}" || err "empty filename set for 'include' directive" || return 1
    f="$(search_inc "${f}")" || return 1
    ret="$(process_file "${f}")" || return 1
    eval_ret "${ret}"
}

# Process 'undef' directive
do_undef ()
{
    local var="$1"

    test -n "${var}" || err "no parameters set for 'undef' directive" || return 1
    check_vname "${var}" || return 1
    eval_ret "$(undef_var "${var}")"
}

# Process 'if' directive
do_if ()
{
    local expr="$1"

    IFLVL=$(( IFLVL + 1 ))
    if test $P -eq 0 ; then
	test -n "${expr}" || err "no parameters set for 'if' directive" || return 1
	eval_expr "${expr}" || return 1
	case "${XRET}" in ( '' | '0' ) P=-${IFLVL} ;; ( * ) P=0 ;; esac
    fi
    IFSTACK="${IFSTACK}|if:${LN}"
}

# Process 'ifdef' directive
do_ifdef ()
{
    local var="$1"

    IFLVL=$(( IFLVL + 1 ))
    if test $P -eq 0 ; then
	test -n "${var}" || err "no parameters set for 'ifdef' directive" || return 1
	check_vname "${var}" || return 1
	is_defined "${var}" && P=0 || P=-${IFLVL}
    fi
    IFSTACK="${IFSTACK}|ifdef:${LN}"
}

# Process 'ifndef' directive
do_ifndef ()
{
    local var="$1"

    IFLVL=$(( IFLVL + 1 ))
    if test $P -eq 0 ; then
	test -n "${var}" || err "no parameters set for 'ifndef' directive" || return 1
	check_vname "${var}" || return 1
	is_defined "${var}" && P=-${IFLVL} || P=0
    fi
    IFSTACK="${IFSTACK}|ifndef:${LN}"
}

# Process 'elif' directive
do_elif ()
{
    local expr="$1"

    case "$P" in
	( 0 | ${IFLVL} | -${IFLVL} )
	    case "${IFSTACK##*|}" in
		( '' ) err "'elif' without 'if'" ;;
		( "else"* ) err "'elif' after 'else'" ;;
	    esac || return 1
	    test -n "${expr}" || err "no parameters set for 'elif' directive" || return 1
	    case "$P" in
		( 0 ) P=${IFLVL} ;;
		( -${IFLVL} )
		    eval_expr "${expr}" || return 1
		    case "${XRET}" in ( '' | '0' ) ;; ( * ) P=0 ;; esac
		    ;;
	    esac ;;
    esac
    IFSTACK="${IFSTACK%|*}|elif:${LN}"
}

# Process 'elifdef' directive
do_elifdef ()
{
    local var="$1"

    case "$P" in
	( 0 | ${IFLVL} | -${IFLVL} )
	    case "${IFSTACK##*|}" in
		( '' ) err "'elifdef' without 'if'" ;;
		( "else"* ) err "'elifdef' after 'else'" ;;
	    esac || return 1
	    test -n "${var}" || err "no parameters set for 'elifdef' directive" || return 1
	    case "$P" in
		( 0 ) P=${IFLVL} ;;
		( -${IFLVL} )
		    check_vname "${var}" || return 1
		    is_defined "${var}" && P=0 ;;
	    esac ;;
    esac
    IFSTACK="${IFSTACK%|*}|elifdef:${LN}"
}

# Process 'elifndef' directive
do_elifndef ()
{
    local var="$1"

    case "$P" in
	( 0 | ${IFLVL} | -${IFLVL} )
	    case "${IFSTACK##*|}" in
		( '' ) err "'elifndef' without 'if'" ;;
		( "else"* ) err "'elifndef' after 'else'" ;;
	    esac || return 1
	    test -n "${var}" || err "no parameters set for 'elifndef' directive" || return 1
	    case "$P" in
		( 0 ) P=${IFLVL} ;;
		( -${IFLVL} )
		    check_vname "${var}" || return 1
		    is_defined "${var}" || P=0 ;;
	    esac ;;
    esac
    IFSTACK="${IFSTACK%|*}|elifndef:${LN}"
}

# Process 'else' directive
do_else ()
{
    case "$P" in
	( 0 | ${IFLVL} | -${IFLVL} )
	    case "${IFSTACK##*|}" in
		( '' ) err "'else' without 'if'" ;;
		( "else"* ) err "'else' after 'else'" ;;
	    esac || return 1
	    test -z "$1" || err "extra parameters for 'else' directive" || return 1
	    case "$P" in
		( 0 ) P=${IFLVL} ;;
		( -${IFLVL} ) P=0 ;;
	    esac ;;
    esac
    IFSTACK="${IFSTACK%|*}|else:${LN}"
}

# Process 'endif' directive
do_endif ()
{
    case "$P" in
	( 0 | ${IFLVL} | -${IFLVL} )
	    case "${IFSTACK}" in ( '' ) err "'endif' without 'if'" || return 1 ;; esac
	    test -z "$1" || err "extra parameters for 'endif' directive" || return 1
	    P=0 ;;
    esac
    IFLVL=$(( IFLVL - 1 ))
    IFSTACK="${IFSTACK%|*}"
}

# Process 'error' directive
do_error ()
{
    local m="$1"

    case "${m}" in ( \"*\" ) m="${m#\"}" ; m="${m%\"}" ;; esac	# Remove quotes
    err "'error' directive: '${m}'" || return 1
}

####

# Examine directive and call handler
do_directive ()
{
    local s="${CURLINE#"${MAGIC}"}"	# Cut 'magic'
    local d=""				# Directive
    local a=""				# Arguments

    # Trim leading spaces and get directive
    case "${s}" in ( [[:space:]]* ) s="${s#"${s%%[![:space:]]*}"}" ;; esac
    d="${s%%[[:space:]]*}"

    case "${d}" in
	( '' | '#'* ) return 0 ;;	# Skip empty directives and comments
	( "if" | "ifdef" | "ifndef" | "elif" | "elifdef" | "elifndef" | "else" | "endif" ) ;;
	( "define" | "error" | "include" | "undef" ) test $P -eq 0 || return 0 ;;
	( * ) test $P -ne 0 && return 0 || err "unknown directive '${d}'" || return 1 ;;
    esac

    # Get arguments and trim spaces
    a="${s#"${d}"}"
    case "${a}" in ( [[:space:]]* ) a="${a#"${a%%[![:space:]]*}"}" ;; esac
    case "${a}" in ( *[[:space:]] ) a="${a%"${a##*[![:space:]]}"}" ;; esac
    # Call handler
    do_${d} "${a}"
}

# Expand variables
expand ()
{
    local s="$1"
    local h=""
    local t=""
    local v=""
    local u=""

    case "${s}" in
	( *"${LM}"*"${RM}"* )
	    h="${s%%"${LM}"*}" ; t="${s#*"${RM}"}"	# Get 'head' and 'tail'
	    v="${s%%"${RM}"*}" ; v="${v#*"${LM}"}"	# Get variable name
	    {
		check_vname "${v}"	&&		# Check variable name
		case "|${VS}|" in
		    ( *"|${v}|"* ) err "recursive expansion of variable '${v}'" ;;
		esac			&&
		VS="${VS}|${v}"		&&		# Add to 'var stack'
		eval "u=\"\${V_${v}}\""	&&		# Expand variable to value
		case "${u}" in
		    ( *"${LM}"*"${RM}"* ) expand "${u}" && u="${VEXP}" ;;	# Recursively expand value
		esac			&&
		VS="${VS%"|${v}"}"	&&		# Remove from 'var stack'
		case "${t}" in
		    ( *"${LM}"*"${RM}"* ) expand "${t}" && t="${VEXP}" ;;	# Expand 'tail'
		esac
	    } || return 1
	    s="${h}${u}${t}"		# Construct expanded string
	    ;;
    esac
    VEXP="${s}"
}

# Output current line
output_line ()
{
    case "${CURLINE}" in
	( *"${LM}"*"${RM}"* )
	    expand "${CURLINE}" && CURLINE="${VEXP}" || return 1 ;;
    esac
    printf "%s\n" "${CURLINE}" >&3
}

# Process line
process_line ()
{
    case "${CURLINE}" in
	( "${MAGIC}"* ) do_directive || return 1 ;;
	( * )
	    test $P -eq 0 || return 0
	    output_line || return 1 ;;
    esac
}

# Print error for unterminated directive
err_unterm ()
{
    local e="${IFSTACK##*|}"
    local d="${e%:*}"
    local l="${e#*:}"

    err "unterminated '${d}' directive at '${CURFILE:-<stdin>}':${l}"
}

# Process file (in subshell)
process_file ()
(
    local if="$1"	# Input file name
    local cf=""		# Canonical file name

    # Check file and open for input
    # FSTACK (file stack) is used for cycles determination
    if test -n "${if}" ; then
	check_file "${if}"		&&
	cf="$(canon_path "${if}")"	&&
	case "|${FSTACK}|" in
	    ( *"|${cf}|"* ) err "cyclic include of file '${cf}'" ;;
	    ( * ) FSTACK="${FSTACK:+${FSTACK}|}${cf}" ;;
	esac				&&
	exec 0< "${if}"			||	# Open input file
	return 1
    fi

    #  The main idea: since 'process_file' is executed in subshell we need
    #  the method of 'transfer' variables defined at 'down' subshell environment
    #  to the 'up' environment (see 'variable visibility scope' for subshells).
    #  This is used for 'define' and 'undef' directives to set or unset
    #  variables in included files and which must be visible at the 'global' level
    CURFILE="${if}"	# CURFILE (current file) is used by 'search_inc'
    IFLVL=0		# IFLVL (current 'if' stack level)
    IFSTACK=""		# IFSTACK ('if' stack) is used for nesting 'if...' directives
    LN=0		# LN (line number) contains current line number
    LVL=$(( ${LVL:-0} + 1 ))	# LVL (current level) is used for nesting control
    P=0			# P (process) is used as flag for conditional processing
    RET=""		# RET (return) is the string that should be passed to 'up' level
    # CURLINE (current line) is used as global buffer
    # Read file line by line
    # (second condition in 'while' is used when last line doesn't contain '\n')
    while IFS= read -r CURLINE || test ${#CURLINE} -ne 0 ; do
	LN=$(( LN + 1 ))
	process_line || err "in file '${if:-<stdin>}':${LN}" || return 1
    done
    # Check for unterminated 'if...' directives
    test ${IFLVL} -eq 0 || err_unterm || return 1
    # 'Transfer' something to 'up' level if any
    test ${LVL} -gt 1 && printf "%s" "${RET}" || true
)

####

# Initialization subroutine
init ()
{
    set -o noglob	# Do not expand pathnames
    INCLIST=""		# List of include directories
    INFILE=""		# Input file (empty for 'stdin')
    LM="#{"		# Left (opening) marker for variables
    MAGIC="#%"		# 'Magic' string for directives
    OUTFILE=""		# Output file (empty for 'stdout')
    RM="}#"		# Right (closing) marker for variables
}

# Startup subroutine
startup ()
{
    # Check input file
    case "${INFILE}" in ( '-' ) INFILE="" ;; esac

    # Check output file
    case "${OUTFILE}" in ( '-' ) OUTFILE="" ;; esac
    if test -n "${OUTFILE}" ; then
	# If output file is set then try to create it
	( : > "${OUTFILE}" ) 2>/dev/null ||
	    err "can't create output file '${OUTFILE}'" || return 1
	exec 3> "${OUTFILE}"	# Open output file as file descriptor '3'
    else
	exec 3>&1		# Copy 'stdout' to file descriptor '3'
    fi
}

# Clean up subroutine
cleanup ()
{
    exec 3>&-	# Close used file descriptors
}

# Clean up the staff and exit with error
clean_fail ()
{
    cleanup
    test -n "${OUTFILE}" && cmd rm -f "${OUTFILE}"
    fail "${1:-1}"
}

# Exit with error code
fail ()
{
    exit "${1:-1}"
}

####

# Main subroutine
main ()
{
    init && get_options "$@" && startup || fail
    trap 'clean_fail 130' HUP INT TERM
    process_file "${INFILE}" || clean_fail
    cleanup
}

# Call main subroutine
main "$@"
