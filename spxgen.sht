#%shebang

SPXGEN_VERSION="2"

#%prolog

#%include sys/msg.shi
#%include sys/pathabs.shi
#%include sys/pathcanon.shi
#%include sys/checkfile.shi

# Print usage information
usage ()
{
    cat << EOF
Usage: ${PROG} file
EOF
}

# Process '#%shebang' directive
do_shebang ()
{
    local _file="$1"
    local _line="$2"

    case "${_line}" in
	( *[[:space:]][![:space:]]* )
	    err "no parameters allowed for '#%shebang' directive"
	    return 1
	    ;;
    esac
    printf "#!/bin/sh\n"	# The only option for now
}

# Process '#%prolog' directive
do_prolog ()
{
    local _file="$1"
    local _line="$2"
    local _f=""

    case "${_line}" in
	( *[[:space:]][![:space:]]* )
	    err "no parameters allowed for '#%prolog' directive"
	    return 1
	    ;;
    esac
    _f="$(absolute_path "sys/prolog" "${_file%/*}")"
    if test -f "${_f}" ; then
	process_file "${_f}"
    else
	embed_prolog
    fi
}

# Embedded prolog code
embed_prolog ()
{
    cat << 'EOF'
#%prolog
EOF
}

# Process '#%include' directive
do_include ()
{
    local _file="$1"
    local _line="$2"
    local _f=""

    set -- ${_line##'#%include'}
    if test $# -eq 0 ; then
	err "no parameters set for '#%include' directive"
	return 1
    fi
    for _f in "$@" ; do
	{
	    _f="$(absolute_path "${_f}" "${_file%/*}")"	&&
	    process_file "${_f}"
	} || return 1
    done
}

# Process '#%ifinclude' directive
do_ifinclude ()
{
    local _file="$1"
    local _line="$2"
    local _f=""
    local _cf=""

    set -- ${_line##'#%ifinclude'}
    if test $# -eq 0 ; then
	err "no parameters set for '#%ifinclude' directive"
	return 1
    fi
    for _f in "$@" ; do
	{
	    _f="$(absolute_path "${_f}" "${_file%/*}")"	&&
	    _cf="$(canonical_path "${_f}")" &&
	    case "|${PLIST}|" in
		( *"|${_cf}|"* ) ;;
		( * ) process_file "${_f}" ;;
	    esac
	} || return 1
    done
}

# Process '#%version' directive
do_version ()
{
    local _file="$1"
    local _line="$2"

    set -- ${_line##'#%version'}
    if test $# -ne 0 ; then
	printf "# version: %s\n" "$*"
	if test -n "${SPXGEN_VERSION}" ; then
	    printf "# spxgen version: %s\n" "${SPXGEN_VERSION}"
	fi
    fi
}

# Examine directive and call handler
do_directive ()
{
    local _file="$1"
    local _line="$2"

    case "${_line}" in
	( '#%shebang' | '#%shebang'[[:space:]]* )
	    do_shebang "${_file}" "${_line}" || return 1 ;;
	( '#%prolog'  | '#%prolog'[[:space:]]*  )
	    do_prolog  "${_file}" "${_line}" || return 1 ;;
	( '#%include' | '#%include'[[:space:]]* )
	    do_include "${_file}" "${_line}" || return 1 ;;
	( '#%ifinclude' | '#%ifinclude'[[:space:]]* )
	    do_ifinclude "${_file}" "${_line}" || return 1 ;;
	( '#%version' | '#%version'[[:space:]]* )
	    do_version "${_file}" "${_line}" || return 1 ;;
	( * )
	    err "unknown directive '${_line%%[[:space:]]*}'"
	    return 1
	    ;;
    esac
}

# Read file
read_file ()
{
    local _file="$1"
    local _ln=0
    local _line=""
    local _rc=0

    test -n "${_file}" || return 1
    while IFS= read -r _line ; do
	_ln="$(( ${_ln} + 1 ))"
	case "${_line}" in
	    ( '#%'* )
		# Save file name and line number
		RSTACK="${RSTACK:+"${RSTACK}|"}${_file}:${_ln}"
		# Execute directive
		do_directive "${_file}" "${_line}" ; _rc=$?
		# Restore file name and line number
		_file="${RSTACK##*'|'}"
		RSTACK="${RSTACK%"${_file}"*}"
		RSTACK="${RSTACK%'|'*}"	# Remove trailing bar
		_ln="${_file##*':'}" ; _file="${_file%':'*}"
		# Finally check for error
		if test ${_rc} -ne 0 ; then
		    err "processing error in file '${_file}' at line ${_ln}"
		    return 1
		fi
		;;
	    ( * ) printf "%s\n" "${_line}" ;;
	esac
    done < "${_file}"
}

# Process file
process_file ()
{
    local _file="$1"
    local _cfile=""

    # Check file
    check_file "${_file}" || return 1

    # Add canonical file name to stack (for cyclic include determination)
    _cfile="$(canonical_path "${_file}")" || return 1
    case "|${PSTACK}|" in
	( *"|${_cfile}|"* )
	    err "cyclic include of file '${_file}'"
	    return 1
	    ;;
	( * ) PSTACK="${PSTACK:+"${PSTACK}|"}${_cfile}" ;;
    esac

    # Read file
    read_file "${_file}" || return 1

    # Remove from file names stack
    _cfile="${PSTACK##*'|'}"	# Restore _cfile
    PSTACK="${PSTACK%"${_cfile}"*}"
    PSTACK="${PSTACK%'|'*}"	# Remove trailing bar

    # Add canonical file name to the list of processed files
    # which is used in conditional '#%ifinclude' directive
    case " ${PLIST} " in
	( *"|${_cfile}|"* ) ;;
	( * ) PLIST="${PLIST:+"${PLIST}|"}${_cfile}" ;;
    esac
}

# Main subroutine
main ()
{
    local _file=""

    test $# -eq 1 || { usage ; return 1 ; }
    {
	_file="$(absolute_path "$1")"	&&
	process_file "${_file}"
    } || return 1
}

# Call main subroutine
main "$@"
