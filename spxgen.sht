#%shebang

SPXGEN_VERSION="20"

#%prolog

#%include sys/checkfile
#%include sys/cmd
#%include sys/msg
#%include sys/pathabs
#%include sys/pathcanon
#%include sys/vars

################

#%embed sys/checkdir checkdir sys/checkdir
#%embed sys/checkfile checkfile sys/checkfile
#%embed sys/checklock checklock sys/checklock
#%embed sys/checkvar checkvar sys/checkvar
#%embed sys/chkvname chkvname sys/chkvname
#%embed sys/config config sys/config
#%embed sys/cmd cmd sys/cmd
#%embed sys/copyfile copyfile sys/copyfile
#%embed sys/findcmd findcmd sys/findcmd
#%embed sys/linkfile linkfile sys/linkfile
#%embed sys/msg msg sys/msg
#%embed sys/pathabs pathabs sys/pathabs
#%embed sys/pathcanon pathcanon sys/pathcanon
#%embed sys/prolog prolog sys/prolog
#%embed sys/vars vars sys/vars

################

# Print usage information
usage ()
{
    cat << EOF
Usage: ${PROG} [-o outfile] [-P prolog] [-R basedir] [-S shebang] inputfile
EOF
}

# Print help information
usage_help ()
{
    usage
    cat << EOF

    -o outfile	output file name
    -P prolog	use 'prolog' file instead of default 'sys/prolog'
    -R basedir	base directory to search include files
    -S shebang	use 'shebang' string instead of default '#!/bin/sh'

    inputfile	input file name
EOF
    exit 0
}

####

# Parse command line options
get_options ()
{
    local _opt=""

    case "$1" in ( '-?' | '-help' | '--help' ) usage_help ;; esac
    while getopts ":o:P:R:S:" _opt ; do
	case "${_opt}" in
	    ( 'o' ) OPT_OUTFILE="${OPTARG}" ;;
	    ( 'P' ) OPT_PROLOG="${OPTARG}"  ;;
	    ( 'R' ) OPT_ROOTDIR="${OPTARG}" ;;
	    ( 'S' ) OPT_SHEBANG="${OPTARG}" ;;
	    ( ':' )
		err "missing argument for option -- '${OPTARG}'"
		usage
		return 1
		;;
	    ( '?' )
		err "unknown option -- '${OPTARG}'"
		usage
		return 1
		;;
	    (  *  )
		err "no handler for option '${_opt}'"
		return 1
		;;
	esac
    done
    shift $((${OPTIND} - 1))
    if test $# -gt 1 ; then
	err "too many arguments"
	usage
	return 1
    elif test $# -eq 1 ; then
	OPT_SRCFILE="$1"
    elif test -z "${SRCFILE}" ; then
	# SRCFILE may be set via environment
	err "mandatory argument missing"
	usage
	return 1
    fi
}

####

# Print output line
output_line ()
{
    printf "%s\n" "$*" >&3
}

# Search file available for processing
search_file ()
{
    local _f="$1"
    local _if=""

    case "${_f}" in
	(    /*  ) _if="$(absolute_path "${_f}")" ;;
	( '$R/'* ) _if="$(absolute_path "${_f#\$R/}" "${ROOTDIR}")" ;;
	( '$S/'* ) _if="${_f#\$S/}" ; _if="${_if:+embed:${_if}}" ;;
	( * )
	    {
		# First check path relative to CURFILE
		_if="$(absolute_path "${_f}" "${CURFILE%/*}")"	&&
		test -f "${_if}"
	    } ||
	    {
		# Second check path relative to ROOTDIR
		test "${ROOTDIR}" != "${CURFILE%/*}"		&&
		_if="$(absolute_path "${_f}" "${ROOTDIR}")"	&&
		test -f "${_if}"
	    } ||
	    {
		# Third check embedded functions
		test -n "${EMBEDMAP}" &&
		case "${EMBEDMAP}" in
		    ( *"[${_f}:"*"]" ) _if="embed:${_f}" ;;
		    ( * ) false ;;
		esac
	    } ||
	    {
		err "can't find file '${_f}'"
		return 1
	    }
	    ;;
    esac
    test -n "${_if}" && printf "%s" "${_if}" || return 1
}

# Create embed function definition
add_embed ()
{
    local _id="$1"	# Id for embed map
    local _fn="$2"	# Function name
    local _f="$3"	# File to read
    local _ef=""
    local _efn=""

    # Check function name
    case "${_fn}" in
	( *[![:alnum:]_]* )
	    err "incorrect function name in '#%embed' directive"
	    return 1
	    ;;
    esac
    test -n "${EMBEDMAP}" &&
    case "${EMBEDMAP}" in
	( *"[${_id}:"*"]"* )	# Check for duplicates
	    err "duplicate embedding for id '${_id}'"
	    return 1
	    ;;
	( *"["*":${_fn}]"* )	# Check if function already defined
	    output_line "EMBEDMAP=\"\${EMBEDMAP}[${_id}:${_fn}]\""
	    EMBEDMAP="${EMBEDMAP}[${_id}:${_fn}]"
	    EMBFLAG="true"
	    return 0
	    ;;
    esac

    # Determine the source for embedding
    _ef="$(search_file "${_f}")" || return 1
    case "${_ef}" in
	( "embed:"* )
	    _efn="${EMBEDMAP##*"[${_ef#embed:}:"}" ; _efn="${_efn%%"]"*}"
	    if ! command -v "embed_${_efn}" >/dev/null ; then
		err "embedding function 'embed_${_efn}' is not defined"
		return 1
	    fi
	    ;;
    esac

    # Output embed function definition
    cat << EOF >&3
embed_${_fn} ()
{
    cat << 'END_${_fn}'
$(test -n "${_efn}" && embed_${_efn} || cmd cat "${_ef}")
END_${_fn}
}
EMBEDMAP="\${EMBEDMAP}[${_id}:${_fn}]"

EOF

    # Add embedding information to EMBEDMAP
    EMBEDMAP="${EMBEDMAP}[${_id}:${_fn}]"
    EMBFLAG="true"

}

####

# Process '#%embed' directive
do_embed ()
{
    local _id=""
    local _fn=""

    set -- ${CURLINE##'#%embed'}
    if test $# -lt 3 ; then
	err "no required parameters set for '#%embed' directive"
	return 1
    fi
    _id="$1" ; _fn="$2" ; shift 2
    add_embed "${_id}" "${_fn}" "$*"
}

# Process '#%include' directive
do_include ()
{
    set -- ${CURLINE##'#%include'}
    if test $# -eq 0 ; then
	err "no parameters set for '#%include' directive"
	return 1
    fi
    include_file "$*"
}

# Process '#%prolog' directive
do_prolog ()
{
    case "${CURLINE}" in
	( *[[:space:]][![:space:]]* )
	    err "no parameters allowed for '#%prolog' directive"
	    return 1
	    ;;
    esac
    include_file "${PROLOG}"
}

# Process '#%shebang' directive
do_shebang ()
{
    case "${CURLINE}" in
	( *[[:space:]][![:space:]]* )
	    err "no parameters allowed for '#%shebang' directive"
	    return 1
	    ;;
    esac
    output_line "${SHEBANG}"
}

# Process '#%uinclude' directive
do_uinclude ()
{
    local _f=""

    set -- ${CURLINE##'#%uinclude'}
    if test $# -eq 0 ; then
	err "no parameters set for '#%uinclude' directive"
	return 1
    fi
    _f="$(search_file "$*")" || return 1
    (
	# Process 'uinclude' file in subshell
	# Reset PLIST so all 'include' directives in 'uinclude' will work as expected
	PLIST=""
	process_file "${_f}"
    )
}

# Process '#%version' directive
do_version ()
{
    set -- ${CURLINE##'#%version'}
    if test $# -ne 0 ; then
	output_line "# version: $*"
	if test -n "${SPXGEN_VERSION}" ; then
	    output_line "# spxgen version: ${SPXGEN_VERSION}"
	fi
    fi
}

# Examine directive and call handler
do_directive ()
{
    case "${CURLINE}" in
	( '#%embed'     | '#%embed'[[:space:]]*     ) do_embed     || return 1 ;;
	( '#%include'   | '#%include'[[:space:]]*   ) do_include   || return 1 ;;
	( '#%prolog'    | '#%prolog'[[:space:]]*    ) do_prolog    || return 1 ;;
	( '#%shebang'   | '#%shebang'[[:space:]]*   ) do_shebang   || return 1 ;;
	( '#%uinclude'  | '#%uinclude'[[:space:]]*  ) do_uinclude  || return 1 ;;
	( '#%version'   | '#%version'[[:space:]]*   ) do_version   || return 1 ;;
	( * )
	    err "unknown directive '${CURLINE%%[[:space:]]*}'"
	    return 1
	    ;;
    esac
}

####

# Include file
include_file ()
{
    local _f="$1"
    local _cf=""

    {
	test -n "${_f}"			&&
	_f="$(search_file "${_f}")"	&&
	case "${_f}" in
	    ( "embed:"* ) _cf="${_f}" ;;
	    ( * ) _cf="$(canonical_path "${_f}")" ;;
	esac				&&
	case "|${PLIST}|" in
	    ( *"|${_cf}|"* ) return 0 ;;
	esac
    } || return 1
    process_file "${_f}"
}

# Read file
read_file ()
{
    local _rfile="$1"
    local _ln=0

    EMBFLAG=""	# Reset 'global' flag (will be set in 'add_embed')
    while IFS= read -r CURLINE ; do
	_ln="$(( ${_ln} + 1 ))"
	case "${CURLINE}" in
	    ( '#%'* )
		do_directive ||
		{
		    err "processing error in file '${_rfile:-${CURFILE}}' at line ${_ln}"
		    return 1
		}
		;;
	    ( * ) output_line "${CURLINE}" ;;
	esac
    done

    # As 'read_file' is executed in subshell there is a way to hand over
    # variables to 'upstream' 'process_file' function
    if test -n "${EMBFLAG}" ; then
	printf 'PLIST="%s" ; EMBEDMAP="%s"' "${PLIST}" "${EMBEDMAP}"
    else
	printf 'PLIST="%s"' "${PLIST}"
    fi
}

# Process file
process_file ()
{
    local _pfile="$1"
    local _cfile=""
    local _id=""
    local _fn=""
    local _ret=""

    case "${_pfile}" in
	( "embed:"* )
	    # Check embedded function
	    _cfile="${_pfile}"
	    _id="${_pfile#embed:}"
	    test -n "${EMBEDMAP}" &&
	    case "${EMBEDMAP}" in
		( *"[${_id}:"*"]" )
		    _fn="${EMBEDMAP##*"[${_id}:"}" ; _fn="${_fn%%"]"*}"
		    if ! command -v "embed_${_fn}" >/dev/null ; then
			err "embedding function 'embed_${_fn}' is not defined"
			return 1
		    fi
		    ;;
		( * )
		    err "can't find embedded id '${_id}'"
		    return 1
		    ;;
	    esac
	    ;;
	( * )
	    # Check file
	    {
		check_file "${_pfile}"	&&
		_cfile="$(canonical_path "${_pfile}")"
	    } || return 1
	    ;;
    esac

    # Add canonical file name to stack (for cyclic include determination)
    case "|${PSTACK}|" in
	( *"|${_cfile}|"* )
	    err "cyclic include of file '${_pfile}'"
	    return 1
	    ;;
	( * ) PSTACK="${PSTACK:+${PSTACK}|}${_cfile}" ;;
    esac

    # Read file
    if test -n "${_fn}" ; then
	_ret="$(embed_${_fn} | read_file "${_pfile}")"
    else
	_ret="$(CURFILE="${_pfile}" ; cmd cat "${CURFILE}" | read_file)"
    fi
    test -n "${_ret}" && eval "${_ret}" || return 1

    # Remove from file names stack
    _cfile="${PSTACK##*"|"}"	# Restore _cfile
    PSTACK="${PSTACK%"${_cfile}"*}"
    PSTACK="${PSTACK%"|"*}"	# Remove trailing bar

    # Add canonical file name to the list of processed files
    # which is used in '#%include' directive
    case " ${PLIST} " in
	( *"|${_cfile}|"* ) ;;
	( * ) PLIST="${PLIST:+${PLIST}|}${_cfile}" ;;
    esac
}

####

# Initialization subroutine
init ()
{
    set -o noglob	# Do not expand pathnames
    # Initialize variables
    var_init OUTFILE PROLOG ROOTDIR SHEBANG SRCFILE &&
    {
	# Set defaults
	DEF_OUTFILE="/dev/stdout"
	DEF_PROLOG="sys/prolog"
	DEF_SHEBANG="#!/bin/sh"
	# Define 'internal' variables
	# PSTACK is used as filenames stack for 'process_file' function
	# PLIST is used as filenames list of the processed files for '#%include' directive
	# CURFILE is currently processing filename
	# CURLINE is currently read line in CURFILE
	# EMBEDMAP is '[id:function]' map for embedded functions
	PSTACK=""
	PLIST=""
	CURFILE=""
	CURLINE=""
	: "${EMBEDMAP:=}"	# Can be set already by embed functions definitions
    } &&
    # Get options
    get_options "$@"	&&
    # Set variables
    var_set  OUTFILE PROLOG ROOTDIR SHEBANG SRCFILE
}

# Startup subroutine
startup ()
{
    ROOTDIR="${ROOTDIR:+$(absolute_path "${ROOTDIR}")}"
    SRCFILE="$(absolute_path "${SRCFILE}")"	&&
    : "${ROOTDIR:=${SRCFILE%/*}}"		&&
    test -n "${PROLOG}"				&&
    test -n "${SHEBANG}"			&&
    OUTFILE="$(absolute_path "${OUTFILE}")"	&&
    exec 3> "${OUTFILE}"
}

# Close output descriptor
cleanup ()
{
    exec 3>&-
}

# Clean up the staff and exit with error
clean_fail ()
{
    cleanup
    cmd rm -f "${OUTFILE}"
    fail "${1:-1}"
}

# Exit with error code
fail ()
{
    exit "${1:-1}"
}

####

# Main subroutine
main ()
{
    init "$@" && startup || fail
    trap 'clean_fail 130' HUP INT TERM
    process_file "${SRCFILE}" || clean_fail
    cleanup
}

# Call main subroutine
main "$@"
