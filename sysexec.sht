#%shebang
#%version 18
#
# Execute commands on remote host
#

#%prolog

################

#%include sys/checkdir
#%include sys/cmd
#%include sys/config
#%include sys/msg
#%include sys/pathabs
#%include sys/pathcanon
#%include sys/vars

################

# Print usage information
usage ()
{
    cat << EOF
Usage: ${PROG} [options] [-u user] [-h host]... [-l listfile]...
	{ [-e command]... [-f cmdfile]... | command }
EOF
}

# Print help information
usage_help ()
{
    usage
    cat << EOF

    Execute commands on remote host

    Main options:
    -u user	user to login to the hosts (default: current user)
    -h host	host where the commands to be executed
    -l listfile	file with the list of hosts where the commands to be executed
    -e command	command to be executed on the hosts
    -f cmdfile	file with the list of commands to be executed on the hosts

    Either '-h' or '-l' or their combination should be set.
    Either combination of '-e' and '-f' flags or just 'command' should be set.

    Other options:
    -c config	configuration file
    -C path	common search path for 'listfile' and 'cmdfile' (colon separated)
    -F path	search path for 'cmdfile' (colon separated)
    -L path	search path for 'listfile' (colon separated)
    -d outdir	output directory for output files
    -o outfile	output file or 'pattern' (%h is host, %u is user)
    -O sshopts	options to 'ssh' command
    -B before	command to execute before processing
    -A after	command to execute after processing
    -p preexec	pre-exec command (%h is host, %u is user, %o is outfile)
    -P postexec	post-exec command (%h is host, %u is user, %o is outfile)
    -j		parallel execution
    -J jobs	maximum parallel processes (default: ${DEF_SE_JOBS})
    -q		print the resulting list of hosts (no commands execution)
    -s		sort list of hosts
    -v		print host name before execution
EOF
    exit 0
}

####

# Parse command line options
get_options ()
{
    local _opt=""
    local _cnum=0
    local _hnum=0

    case "$1" in ( '-?' | '-help' | '--help' ) usage_help ;; esac
    while getopts ":A:B:C:F:J:L:O:P:c:d:e:f:h:jl:o:p:qsu:v" _opt ; do
	case "${_opt}" in
	    ( 'A' ) OPT_SE_AFTER="${OPTARG}" ;;
	    ( 'B' ) OPT_SE_BEFORE="${OPTARG}" ;;
	    ( 'C' ) OPT_SE_CPATH="${OPT_SE_CPATH:+${OPT_SE_CPATH}:}${OPTARG}" ;;
	    ( 'F' ) OPT_SE_FPATH="${OPT_SE_FPATH:+${OPT_SE_FPATH}:}${OPTARG}" ;;
	    ( 'J' ) OPT_SE_JOBS="${OPTARG}" ;;
	    ( 'L' ) OPT_SE_LPATH="${OPT_SE_LPATH:+${OPT_SE_LPATH}:}${OPTARG}" ;;
	    ( 'O' ) OPT_SE_SSHOPTS="${OPT_SE_SSHOPTS:+"${OPT_SE_SSHOPTS} "}${OPTARG}" ;;
	    ( 'P' ) OPT_SE_POSTEXEC="${OPTARG}" ;;
	    ( 'c' ) OPT_CONF_FILE="$(absolute_path "${OPTARG}")" ;;
	    ( 'd' ) OPT_SE_OUTDIR="${OPTARG}" ;;
	    ( 'e' )
		test -n "${OPTARG}" || continue
		_cnum="$(( ${_cnum} + 1 ))"
		eval SE_CLIST_E${_cnum}=\"\${OPTARG}\"
		SE_CLIST="${SE_CLIST:+"${SE_CLIST} "}E${_cnum}"
		;;
	    ( 'f' )
		test -n "${OPTARG}" || continue
		_cnum="$(( ${_cnum} + 1 ))"
		eval SE_CLIST_F${_cnum}=\"\${OPTARG}\"
		SE_CLIST="${SE_CLIST:+"${SE_CLIST} "}F${_cnum}"
		;;
	    ( 'h' )
		test -n "${OPTARG}" || continue
		_hnum="$(( ${_hnum} + 1 ))"
		eval SE_HLIST_H${_hnum}=\"\${OPTARG}\"
		SE_HLIST="${SE_HLIST:+"${SE_HLIST} "}H${_hnum}"
		;;
	    ( 'j' ) F_JOBS="true" ;;
	    ( 'l' )
		test -n "${OPTARG}" || continue
		_hnum="$(( ${_hnum} + 1 ))"
		eval SE_HLIST_L${_hnum}=\"\${OPTARG}\"
		SE_HLIST="${SE_HLIST:+"${SE_HLIST} "}L${_hnum}"
		;;
	    ( 'o' ) OPT_SE_OUTFILE="${OPTARG}" ;;
	    ( 'p' ) OPT_SE_PREEXEC="${OPTARG}" ;;
	    ( 'q' ) F_PRINT="true" ;;
	    ( 's' ) F_SORT="true" ;;
	    ( 'u' ) OPT_SE_USER="${OPTARG}" ;;
	    ( 'v' ) F_VERBOSE="true" ;;
	    ( ':' )
		err "missing argument for option -- '${OPTARG}'"
		usage ; return 1 ;;
	    ( '?' )
		err "unknown option -- '${OPTARG}'"
		usage ; return 1 ;;
	    (  *  )
		err "no handler for option '${_opt}'"
		return 1 ;;
	esac
    done
    shift $((${OPTIND} - 1))
    if test -n "$*" ; then
	if test -n "${SE_CLIST}" ; then
	    err "'-e' and '-f' options are mutually exclusive with 'command'"
	    return 1
	fi
	SE_CLIST_E1="$*"
	SE_CLIST="E1"
    fi
}

####

# Create 'outfile'
create_outfile ()
{
    local _of="$1"
    local _dir=""

    if ! test -e "${_of}" ; then
	# Try to create intermediate directories
	_dir="${_of%/*}"
	check_dir "${_dir:-/}" || return 1
    fi
    # Try to create output file
    ( : > "${_of}" ) 2>/dev/null ||
	{ err "can't create file '${_of}'" ; return 1 ; }
}

# Process line for host
# return 1 for errors, 2 for warnings
process_hline ()
{
    local _host="$1"
    local _user="${SE_USER}"
    local _of="${SE_OUTFILE}"
    local _pre=""
    local _post=""

    # Check that line in format 'user@host'
    case "${_host}" in
	( *'@'* )
	    _user="${_host%%\@*}" ; _host="${_host#*\@}"
	    # Check user name
	    case "${_user}" in
		( '' ) _user="${SE_USER}" ;;
		( *[[:space:]]* ) warn "username '${_user}' with spaces" ; return 2 ;;
	    esac
	    ;;
    esac
    # Check hostname
    case "${_host}" in
	( '' ) warn "empty hostname" ; return 2 ;;
	( *[[:space:]]* ) warn "hostname '${_host}' with spaces" ; return 2 ;;
    esac

    # Get output file
    if test -n "${F_FMTOUT}" ; then
	_of="$(process_outfile "${_host}" "${_user}" "${SE_OUTFILE}")" ||
	return 1
    fi

    # Get pre/post commands
    if test -n "${F_FMTPRE}" ; then
	_pre="$(process_prepost  "PRE"  "${_host}" "${_user}" "${_of}")" ||
	return 1
    fi
    if test -n "${F_FMTPOST}" ; then
	_post="$(process_prepost "POST" "${_host}" "${_user}" "${_of}")" ||
	return 1
    fi

    printf "%s|%s|%s|%s|%s\n" "${_host}" "${_user}" "${_of}" "${_pre}" "${_post}"
}

# Process host list file
process_hlist ()
{
    local _file="$1"
    local _ln=0
    local _cfile=""
    local _line=""
    local _if=""
    local _dir=""
    local _del=""
    local _rc=0

    # Add canonical file name to stack
    _cfile="$(canonical_path "${_file}")"
    case "|${PSTACK}|" in
	( *"|${_cfile}|"* ) warn "cyclic include of file '${_file}'" ; return 2 ;;
	( * ) PSTACK="${PSTACK:+${PSTACK}|}${_cfile}" ;;
    esac

    # Read file
    while read -r _line ; do
	_ln="$(( ${_ln} + 1 ))"
	case "${_line}" in
	    ( '' | '#'* ) continue ;;	# Skip comments and empty lines
	    ( '%'* )	# Include file
		_if="${_line#\%}"	# Remove '%'
		case "${_if}" in
		    ( '' ) continue ;;	# Skip empty include
		    ( [[:space:]]* )	# Remove leading spaces
			_del="${_if%%[![:space:]]*}"	# Get spaces at the beginning...
			_if="${_if#"${_del}"}"		# ...and cut them
			;;
		esac
		_dir="${_file%/*}"
		case "${_dir}" in
		    ( '' ) _dir="/" ;;
		    ( "${_file}" ) _dir="$(pwd)" ;;
		esac
		_if="$(absolute_path "${_if}" "${_dir}")"
		test -f "${_if}" ||
		{
		    warn "can't include file '${_if}' from '${_file}:${_ln}'"
		    continue	# Ignore absent file
		}
		( process_hlist "${_if}" ) ; _rc=$?
		;;
	    ( * ) process_hline "${_line}" ; _rc=$? ;;
	esac
	case "${_rc}" in
	    ( 1 ) err "processing error in file '${_file}:${_ln}'" ; return 1 ;;
	    ( 2 ) warn "processing warning in file '${_file}:${_ln}'" ;;
	esac
    done < "${_file}"

    # Remove from file names stack
    _del="${PSTACK##*"|"}"
    PSTACK="${PSTACK%"${_del}"*}"
    PSTACK="${PSTACK%"|"*}"	# Remove trailing bar
}

# Expand patterns in 'outfile'
process_outfile ()
{
    local _host="$1"
    local _user="$2"
    local _out="$3"

    while : ; do
	case "${_out}" in
	    ( *'%h'* ) _out="${_out%%\%h*}${_host}${_out#*\%h}" ;;
	    ( *'%u'* ) _out="${_out%%\%u*}${_user}${_out#*\%u}" ;;
	    ( * ) break ;;
	esac
    done
    # 'absolute_path' will print path by itself
    absolute_path "${_out}" "${SE_OUTDIR}" || return 1
}

# Execute pre/post command
process_prepost ()
{
    local _x="$1"	# PRE or POST
    local _host="$2"
    local _user="$3"
    local _out="$4"
    local _cmd=""
    local _c=""

    eval _cmd=\"\${SE_${_x}EXEC}\"
    eval _flag=\"\${F_FMT${_x}}\"

    # Expand patterns
    while : ; do
	case "${_cmd}" in
	    ( *'%h'* ) _cmd="${_cmd%%\%h*}${_host}${_cmd#*\%h}" ;;
	    ( *'%u'* ) _cmd="${_cmd%%\%u*}${_user}${_cmd#*\%u}" ;;
	    ( *'%o'* ) _cmd="${_cmd%%\%o*}${_out}${_cmd#*\%o}"  ;;
	    ( * ) break ;;
	esac
    done

    # Check if command is expanded
    case "${_flag}" in
	( "cmd" )
	    # Command contains patterns so check executable
	    eval set -- "${_cmd}"
	    _c="$1" ; shift
	    _cmd="$(check_exec "${_c}")" || return 1
	    printf '"%s"' "${_cmd}"
	    for _c in "$@" ; do printf ' "%s"' "${_c}" ; done
	    ;;
	( * ) printf "%s" "${_cmd}" ;;
    esac
}

####

# Execute commands from command list on hosts from host list
exec_ssh ()
{
    local _host=""
    local _user=""
    local _of=""
    local _pre=""
    local _post=""
    local _job="${SE_JOBS}"

    # Execute 'before' command
    if test -n "${SE_BEFORE}" ; then
	eval "${SE_BEFORE}" || return 1
    fi

    # Try to create output file if 'outfile' is not pattern
    if test -n "${SE_OUTFILE}" && test -z "${F_FMTOUT}" ; then
	create_outfile "${SE_OUTFILE}" || return 1
    fi

    # Execute commands on hosts
    while IFS="|" read -r _host _user _of _pre _post ; do
	if test -n "${F_FMTOUT}" ; then
	    create_outfile "${_of}" || return 1
	fi

	# Print host name if verbose
	test -n "${F_VERBOSE}" && printf "%s\n" "${_host}"

	# Execute the following in background
	(
	    # Execute pre-exec command
	    if test -n "${_pre}" ; then
		eval "${_pre}" ||
		    { err "non-zero status from pre-exec command '${_pre}'" ; return 1 ; }
	    fi

	    # Redirect input and output
	    exec 4<&0 0< "${W_CLIST}"
	    test -n "${_of}" && exec 5>&1 1>> "${_of}"

	    # Finally execute 'ssh'
	    eval "${SSH}" "${SE_SSHOPTS}" -T -l "${_user}" "${_host}"

	    # Restore input and output
	    exec 0<&4 4<&-
	    test -n "${_of}" && exec 1>&5 5>&-

	    # Execute post-exec command
	    if test -n "${_post}" ; then
		eval "${_post}" ||
		    { err "non-zero status from post-exec command '${_post}'" ; return 1 ; }
	    fi
	) &
	if test -n "${F_JOBS}" ; then
	    _job="$(( ${_job} - 1 ))"
	    if test "${_job}" -le 0 ; then
		wait			# Wait for running background processes
		_job="${SE_JOBS}"	# Reset counter
	    fi
	else
	    # Wait single process if not parallel execution
	    wait
	fi
    done < "${W_HLIST}"

    # Wait for all background processes
    test -n "${F_JOBS}" && wait

    # Execute 'after' command
    if test -n "${SE_AFTER}" ; then
	eval "${SE_AFTER}" || return 1
    fi
}

# Fill command list file
mk_cmdlist ()
{
    local _e=""
    local _f=""
    local _elem=""

    for _e in ${SE_CLIST} ; do
	eval _elem=\"\${SE_CLIST_${_e}}\"
	case "${_e}" in
	    ( E* ) printf "%s\n" "${_elem}" >> "${W_CLIST}" ;;
	    ( F* )
		eval set -- "${_elem}"
		for _f in "$@" ; do
		    cmd cat "${_f}" >> "${W_CLIST}" || return 1
		done
		;;
	esac
    done
    test -s "${W_CLIST}" ||
	{ err "resulting command list is empty" ; return 1 ; }
}

# Fill host list file
mk_hostlist ()
{
    local _e=""
    local _f=""
    local _elem=""
    local _rc=0

    for _e in ${SE_HLIST} ; do
	eval _elem=\"\${SE_HLIST_${_e}}\"
	eval set -- "${_elem}"
	for _f in "$@" ; do
	    case "${_e}" in
		( H* ) process_hline "${_f}" >> "${W_HLIST}" ; _rc=$? ;;
		( L* ) process_hlist "${_f}" >> "${W_HLIST}" ; _rc=$? ;;
	    esac
	    test "${_rc}" -eq 1 && return 1
	done
    done
    test -s "${W_HLIST}" ||
	{ err "resulting host list is empty" ; return 1 ; }
    if test -n "${F_SORT}" ; then
	# Sort host list file in place
	cmd sort -u -o "${W_HLIST}" "${W_HLIST}" || return 1
    fi
}

# Print host list file
print_hostlist ()
{
    local _host=""
    local _x=""

    while IFS="|" read -r _host _x ; do
	printf "%s\n" "${_host}"
    done < "${W_HLIST}"
}

####

# Check command list
check_cmdlist ()
{
    if test -z "${SE_CLIST}" ; then
	# Add config and/or environment SE_CMD and SE_CMDLIST if set
	test -n "${SE_CMD}" &&
	{
	    SE_CLIST_E1="${SE_CMD}"
	    SE_CLIST="E1"
	}
	test -n "${SE_CMDFILE}" &&
	{
	    SE_CLIST_F2="${SE_CMDFILE}"
	    SE_CLIST="${SE_CLIST:+"${SE_CLIST} "}F2"
	}
	if test -z "${SE_CLIST}" ; then
	    err "neither 'command' nor 'cmdfile' is set"
	    return 1
	fi
    fi
    # Normalize SE_FPATH
    test -n "${SE_FPATH}" &&
    SE_FPATH="$(check_paths "${SE_FPATH}${SE_CPATH:+:${SE_CPATH}}")" ||
    SE_FPATH="$(check_paths "${SE_CPATH}")"
}

# Check executable
check_exec ()
{
    local _cmd="$1"

    if test -f "${_cmd}" && test -x "${_cmd}" ; then
	printf "%s" "$(absolute_path "${_cmd}")"
    else
	err "can't find executable '${_cmd}'"
	return 1
    fi
}

# Check host list
check_hostlist ()
{
    if test -z "${SE_HLIST}" ; then
	# Add config and/or environment SE_HOST and SE_LIST if set
	test -n "${SE_HOST}" &&
	{
	    SE_HLIST_H1="${SE_HOST}"
	    SE_HLIST="H1"
	}
	test -n "${SE_LIST}" &&
	{
	    SE_HLIST_L2="${SE_LIST}"
	    SE_HLIST="${SE_HLIST:+"${SE_HLIST} "}L2"
	}
	if test -z "${SE_HLIST}" ; then
	    err "neither 'host' nor 'listfile' is set"
	    return 1
	fi
    fi
    # Normalize SE_LPATH
    test -n "${SE_LPATH}" &&
    SE_LPATH="$(check_paths "${SE_LPATH}${SE_CPATH:+:${SE_CPATH}}")" ||
    SE_LPATH="$(check_paths "${SE_CPATH}")"
}

# Check directories in SE_XPATH and return list of existing directories
check_paths ()
{
    local _xpath="$1"
    local _npath=""
    local _dir=""
    local _ifs=""

    if test -n "${_xpath}" ; then
	_ifs="${IFS}" ; IFS=":"		# Save IFS and set to ':'
	for _dir in ${_xpath} ; do
	    _dir="$(absolute_path "${_dir}")"
	    # Check for duplicates
	    case ":${_npath}:" in
		( *":${_dir}:"* ) continue ;;
	    esac
	    # Check directory
	    test -d "${_dir}" && _npath="${_npath:+${_npath}:}${_dir}"
	done
	IFS="${_ifs}"			# Restore IFS
	printf "%s" "${_npath}"
    fi
}

# Check pre/post commands
check_prepost ()
{
    local _cmd=""
    local _c=""

    if test -n "${SE_PREEXEC}" ; then
	F_FMTPRE="true"
	eval set -- "${SE_PREEXEC}"
	_c="$1" ; shift
	case "${_c}" in
	    ( *'%h'* | *'%u'* | *'%o'* ) F_FMTPRE="cmd" ; _cmd="${_c}" ;;
	    ( * ) _cmd="$(check_exec "${_c}")" || return 1 ;;
	esac
	SE_PREEXEC="\"${_cmd}\""
	for _c in "$@" ; do
	    SE_PREEXEC="${SE_PREEXEC} \"${_c}\""
	done
    fi
    if test -n "${SE_POSTEXEC}" ; then
	F_FMTPOST="true"
	eval set -- "${SE_POSTEXEC}"
	_c="$1" ; shift
	case "${_c}" in
	    ( *'%h'* | *'%u'* | *'%o'* ) F_FMTPOST="cmd" ; _cmd="${_c}" ;;
	    ( * ) _cmd="$(check_exec "${_c}")" || return 1 ;;
	esac
	SE_POSTEXEC="\"${_cmd}\""
	for _c in "$@" ; do
	    SE_POSTEXEC="${SE_POSTEXEC} \"${_c}\""
	done
    fi
}

# Search and check files in cmd and host lists
search_files ()
{
    local _e=""
    local _f=""
    local _nf=""
    local _list=""
    local _elist=""
    local _flist=""
    local _path=""
    local _dir=""
    local _args=""
    local _ifs=""

    _elist="${SE_HLIST}"
    test -n "${F_PRINT}" || _elist="${_elist} ${SE_CLIST}"
    for _e in ${_elist} ; do
	case "${_e}" in
	    ( F* ) eval _list=\"SE_CLIST_${_e}\" ; _path="${SE_FPATH}" ;;
	    ( L* ) eval _list=\"SE_HLIST_${_e}\" ; _path="${SE_LPATH}" ;;
	    (  * ) continue ;;
	esac
	_flist=""
	eval _args=\"\${${_list}}\"
	eval set -- "${_args}"
	for _f in "$@" ; do
	    _nf=""
	    case "${_f}" in ( '~/'* ) _f="${HOME%/}/${_f#\~/}" ;; esac
	    case "${_f}" in
		( /* ) test -f "${_f}" && _nf="$(absolute_path "${_f}")" ;;
		(  * )
		    if test -f "${_f}" ; then
			# First check file 'as is'
			_nf="$(absolute_path "${_f}")"
		    elif test -n "${_path}" ; then
			# Search file in search directories
			_ifs="${IFS}" ; IFS=":"
			for _dir in ${_path} ; do
			    if test -f "${_dir}/${_f}" ; then
				_nf="$(absolute_path "${_f}" "${_dir}")"
				break	# Found
			    fi
			done
			IFS="${_ifs}"
		    fi
		    ;;
	    esac
	    if test -z "${_nf}" ; then
		err "file '${_f}' not found"
		return 1
	    fi

	    # Quote file name with spaces
	    case "${_nf}" in ( *[[:space:]]* ) _nf="\"${_nf}\"" ;; esac
	    # Add file name to list
	    _flist="${_flist:+"${_flist} "}${_nf}"
	done
	eval ${_list}=\"\${_flist}\"
    done
}

####

# Initialization subroutine
init ()
{
    set -o noglob	# Do not expand pathnames
    # Initialize variables
    var_init SE_CMD SE_CMDFILE SE_HOST SE_LIST SE_SSHOPTS SE_USER \
	     SE_OUTDIR SE_OUTFILE SE_CPATH SE_FPATH SE_LPATH \
	     SE_BEFORE SE_AFTER SE_PREEXEC SE_POSTEXEC SE_JOBS	&&
    {
	# Set defaults
	DEF_SE_OUTDIR="$(pwd)"
	DEF_SE_USER="$(cmd id -un)"
	DEF_SE_JOBS="8"
    } &&
    {
	# Define 'internal' variables
	SSH="$(command -v ssh)"
	WORKDIR="${TMPDIR:-/tmp}/${PROG}.$$"
	W_CLIST="${WORKDIR}/cmdlist"
	W_HLIST="${WORKDIR}/hostlist"
	PSTACK=""
	SE_CLIST=""
	SE_HLIST=""
	F_JOBS=""
	F_FMTOUT=""
	F_FMTPRE=""
	F_FMTPOST=""
	F_PRINT=""
	F_SORT=""
	F_VERBOSE=""
    } &&
    # Set up configuration file variables
    var_init CONF_FILE		&&
    DEF_CONF_FILE="spxshell/sysexec.conf"	&&
    # Get options
    get_options "$@"		&&
    # Read configuration file
    var_set  CONF_FILE		&&
    read_config "${CONF_FILE}"	&&
    # Set variables
    var_set  SE_CMD SE_CMDFILE SE_HOST SE_LIST SE_SSHOPTS SE_USER \
	     SE_OUTDIR SE_OUTFILE SE_CPATH SE_FPATH SE_LPATH \
	     SE_BEFORE SE_AFTER SE_PREEXEC SE_POSTEXEC SE_JOBS
}

# Startup subroutine
startup ()
{
    # Check 'ssh' executable
    if test -z "${SSH}" ; then
	err "'ssh' executable not found"
	return 1
    fi

    # Check user
    case "${SE_USER}" in
	( '' ) err "empty value for 'user'" ; return 1 ;;
	( *[[:space:]]* ) err "'user' contains spaces" ; return 1 ;;
    esac

    # Check command list if no '-q' option is set
    if test -z "${F_PRINT}" ; then
	check_cmdlist || return 1
    fi

    # Check host list
    check_hostlist || return 1

    # Search and check files in command and host lists for existance
    #   convert to absolute paths and quote filenames with spaces
    search_files || return 1

    # Check 'outdir' option
    case "${SE_OUTDIR}" in
	( '' ) err "empty value for 'outdir'" ; return 1 ;;
	( *  ) SE_OUTDIR="$(absolute_path "${SE_OUTDIR}")" ;;
    esac

    # Check 'outfile' option
    case "${SE_OUTFILE}" in
	( ''  ) ;;
	( '-' ) SE_OUTFILE="" ;;
	( *'%h'* | *'%u'* ) F_FMTOUT="true" ;;
	( *  ) SE_OUTFILE="$(absolute_path "${SE_OUTFILE}" "${SE_OUTDIR}")" ;;
    esac

    # Check pre/post commands
    check_prepost || return 1

    # Check jobs variable
    case "${SE_JOBS}" in
	( *[![:digit:]]* ) err "'jobs' is not a number" ; return 1 ;;
    esac

    # Check working directory
    ( umask 0077 ; check_dir "${WORKDIR}" ) || return 1
    # Try to create working files
    ( : > "${W_CLIST}" && : > "${W_HLIST}" ) 2>/dev/null ||
	{ err "can't create temporary files" ; return 1 ; }
}

# Clean up the staff
cleanup ()
{
    if test -d "${WORKDIR}" ; then
	cmd rm -f "${W_CLIST}" "${W_HLIST}"
	cmd rmdir "${WORKDIR}"
    fi
}

# Clean up the staff and exit with error
clean_fail ()
{
    if test -n "${trapped}" ; then
	trap '' HUP INT TERM	# Ignore signals
	kill 0			# Send signal to entire process group
    fi
    cleanup
    fail "${1:-1}"
}

# Exit with error code
fail ()
{
    exit "${1:-1}"
}

####

# Main subroutine
main ()
{
    init "$@" && startup || fail
    trap 'trapped=yes clean_fail 130' HUP INT TERM
    {
	mk_hostlist	&&
	if test -n "${F_PRINT}" ; then
	    print_hostlist
	else
	    mk_cmdlist && exec_ssh
	fi
    } || clean_fail
    cleanup
}

# Call main subroutine
main "$@"
